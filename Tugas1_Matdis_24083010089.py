# -*- coding: utf-8 -*-
"""MatdisA_Laudya_meitaneia_Sianturi_24083010089.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XB-VxvoIoKrGfIvFObFPr8it60tJ2PkZ
"""

from google.colab import files
upload = files.upload()

"""Pembuatan dataset(matriks C)yang berisi 40 mahasiswa × 4 kriteria dan menimportnya ke g.colab"""

import pandas as pd

data = pd.read_csv(list(upload.keys())[0])

df = pd.DataFrame(data)
df

"""kode diatas berfungsi untuk membaca dataset mahasiswa secara langsung dari file matriks_C.csv. Data yang dimuat berisi daftar mahasiswa beserta nilai penilaian mereka pada beberapa kriteria. Setelah file berhasil dibaca kemudian fungsi df bertujuan untuk menampilkan seluruh data dalam dataset.

Menentukan matriks bobot (Matrix P)
"""

import numpy as np

variances = df[["A","B","C","D"]].var()
weights = variances / variances.sum()
P = weights.to_numpy()

print("\nMatriks P:")
print(weights)

equal_weights = np.array([0.25, 0.25, 0.25, 0.25])

"""Matriks bobot (Matrix P) berfungsi untuk memberi tingkat kepentingan pada setiap kriteria karena tidak semua kriteria memiliki tingkat kepentingan yang sama, sehingga dibutuhkan bobot.

MEnghitung skor gabungan
"""

X = df[["A","B","C","D"]].to_numpy()

df["Score_variance"] = X @ P
df["Score_equal"] = X @ equal_weights

df_ranked = df.sort_values("Score_variance", ascending=False)
print("\nTop 4 Mahasiswa (Variance-weighted):")
print(df_ranked[["NPM","Nama","Score_variance"]].head(4))

"""Dengan mengalikan nilai tiap mahasiswa dengan bobotnya (perkalian C x P ), kita dapat skor total. Dari skor kita dapat menggunakannya untuk membuat ranking.
Seperti yang dapat kita lihat pada output ada 4 mahasiswa dengan ranking tertinggi yaitu febriani,Muhammad,Yohannes dan Maulida.Output tersebut menunjukkan bahwa mereka mempunyai kombinasi nilai terbaik dalam semua aspek, bukan hanya unggul di satu kriteria saja.

Matriks kovarian & korelasi
"""

cov_matrix = df[["A","B","C","D"]].cov()
corr_matrix = df[["A","B","C","D"]].corr()

print("\nCovariance Matrix:\n", cov_matrix)
print("\nCorrelation Matrix:\n", corr_matrix)

"""-Kovarian adalah ukuran statistik yang menunjukkan bagaimana dua variabel bergerak bersama-sama.
Jika kovarian positif, artinya ketika satu variabel naik, variabel lain cenderung ikut naik.
Jika kovarian negatif, artinya ketika satu variabel naik, variabel lain cenderung turun.
Misalnya kovarian (A, B) = 0.0562(cukup besar) artinya mahasiswa yang bagus akademik cenderung juga bagus keterampilannya.

-Korelasi adalah versi "standar" dari kovarian.
Jika +1 artinya hubungan sempurna positif.
Jika -1 artinya hubungan sempurna negatif.
Jika 0 artinya tidak ada hubungan.

"""

import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans

"""Cosine Similarity"""

# 5. Cosine Similarity
similarity = cosine_similarity(X)
sim_df = pd.DataFrame(similarity, index=df["Nama"], columns=df["Nama"])
sim_df

"""Cosine similarity dipakai untuk mengukur tingkat kemiripan antar mahasiswa berdasarkan nilai mereka di empat kriteria.

Nilainya antara 0 sampai 1.

1 → pola nilai dua mahasiswa sama persis.

0 → pola nilai dua mahasiswa sangat berbeda.

contohnnya Febriani & Muhammad Naufal = 0.95 → hampir identik.
Yohanes & Raveena = 0.92 → juga sangat mirip.
agar lebih mudah dipahami cosine similarity di definisikan seperti mengukur arah panah. Dua panah bisa panjangnya beda (nilai total berbeda), tapi kalau arahnya sama (pola sama), maka similarity tinggi.
"""

pairs = []
for i in range(len(similarity)):
    for j in range(i+1, len(similarity)):
        pairs.append((df.loc[i,"Nama"], df.loc[j,"Nama"], similarity[i,j]))

pairs_sorted = sorted(pairs, key=lambda x: x[2], reverse=True)[:10]
print("\nTop 10 Pasangan Mahasiswa Paling Mirip (Cosine Similarity):")
for p in pairs_sorted:
    print(p)

"""PCA + KMeans Clustering"""

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

pca = PCA(n_components=2)
X_pca = pca.fit_transform(X_scaled)
print("\nExplained Variance Ratio (PCA):", pca.explained_variance_ratio_)
kmeans = KMeans(n_clusters=3, random_state=42, n_init=10)
clusters = kmeans.fit_predict(X_pca)

df_result = pd.DataFrame({
    "Nama": df["Nama"],
    "PC1": X_pca[:, 0].round(3),
    "PC2": X_pca[:, 1].round(3),
    "Cluster": clusters
})

print("\nHasil PCA dan Clustering:\n")
print(df_result.to_string(index=False))

"""Kode di atas digunakan untuk melakukan analisis PCA sekaligus pengelompokan mahasiswa dengan metode KMeans.PCA atau Principal Component Analysis merupakan salah satu metode untuk mereduksi dimensi data.Pertama, data distandarisasi menggunakan StandardScaler agar setiap variabel berada pada skala yang sama. Setelah itu, dilakukan PCA dengan dua komponen utama (PC1 dan PC2) untuk mereduksi dimensi data sehingga lebih mudah divisualisasikan. Kedua dimensi ini tetap menyimpan informasi utama dari data awal sehingga lebih mudah divisualisasikan dalam grafik dua dimensi. Berdasarkan hasil analisis, PC1 mampu menjelaskan sekitar 40% variasi dalam data, sementara PC2 menjelaskan 25%. Artinya, hanya dengan dua sumbu saja sudah dapat menggambarkan 65% informasi dari keseluruhan data.

Kemudian clustering merupakan teknik analisis untuk mengelompokkan mahasiswa berdasarkan kemiripan nilai yang mereka miliki. Dalam hal ini digunakan algoritma KMeans dengan jumlah kelompok yang ditentukan sebanyak tiga.

#visualisai
"""

# 1. Heatmap Korelasi
plt.figure(figsize=(6,4))
sns.heatmap(corr_matrix, annot=True, cmap="coolwarm", center=0)
plt.title("Correlation Matrix")
plt.show()

"""Heatmap korelasi di atas menampilkan hubungan antar variabel A, B, C, dan D dalam bentuk visual.Setiap kotak menunjukkan nilai korelasi Pearson antara dua variabel.Dari hasil yang terlihat, sebagian besar variabel memiliki korelasi positif dengan kekuatan lemah hingga sedang, misalnya A dengan B (0,36) dan B dengan D (0,36). Sebaliknya, hubungan B dengan C menunjukkan korelasi negatif kecil (-0,15), artinya peningkatan pada B cenderung diikuti sedikit penurunan pada C."""

# 2. Scatterplot PCA dengan cluster
plt.figure(figsize=(6,5))
sns.scatterplot(x="PC1", y="PC2", hue="Cluster", data=df, palette="Set2", s=100)
for i, row in df.iterrows():
    plt.text(row["PC1"]+0.02, row["PC2"]+0.02, row["Nama"].split()[0], fontsize=7)
plt.title("PCA Clustering (k=3)")
plt.show()

"""Scatterplot di atas menampilkan hasil pengelompokan mahasiswa menggunakan PCA dan algoritma KMeans dengan jumlah cluster sebanyak tiga seperti kode yang diatas tadi. Sumbu X (PC1) dan sumbu Y (PC2) merupakan hasil reduksi dimensi dari data asli, sehingga pola perbedaan antar mahasiswa bisa divisualisasikan dalam bidang dua dimensi.Dari sebaran titik terlihat bahwa mahasiswa dengan karakteristik yang mirip cenderung berkumpul dalam area yang berdekatan. Misalnya, cluster 1(orange) terkumpul di bagian kanan atas yang menggambarkan mahasiswa dengan capaian lebih tinggi, sementara cluster 2 (biru) lebih banyak tersebar ke sisi kiri, dan cluster 0 (hijau) berada di area tengah hingga bawah. Visualisasi ini membantu memberikan gambaran jelas mengenai posisi relatif tiap mahasiswa  sehingga memudahkan interpretasi lebih lanjut."""

# 3. Heatmap Cosine Similarity
plt.figure(figsize=(10,8))
sns.heatmap(sim_df, cmap="viridis")
plt.title("Cosine Similarity antar Mahasiswa")
plt.show()

"""kode ini menampilkan heatmap cosine similarity yang menggambarkan tingkat kemiripan antar mahasiswa berdasarkan pola nilai mereka. Setiap sumbu horizontal dan vertikal berisi nama mahasiswa, sementara warna pada kotak menunjukkan seberapa mirip dua mahasiswa dibandingkan."""

# 4. Ranking skor mahasiswa
plt.figure(figsize=(6,4))
sns.barplot(x="Score_variance", y="Nama", data=df_ranked.head(5), palette="Blues_r")
plt.title("Top 5 Mahasiswa (Variance-weighted Score)")
plt.xlabel("Score")
plt.ylabel("Nama")
plt.show()

"""kode tersebut menunjukkan 5 mahasiswa dengan peringkat paling atas"""

